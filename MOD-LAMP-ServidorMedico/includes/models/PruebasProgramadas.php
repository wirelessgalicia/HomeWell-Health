<?php
/*
 * This file is part of HomeWell-Health
 *
 * Copyright (C) 2011-2012 WirelessGalicia S.L.
 *
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 */

/**
 * PruebasProgramadas
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class PruebasProgramadas extends BasePruebasProgramadas
{

    public function descripcionEstado()
    {
        // {{{

        if ($this->estado == 'P') {
            return 'Programada';
        } elseif ($this->estado == 'I') {
            return 'Iniciada';
        } elseif ($this->estado == 'F') {
            return 'Finalizada';
        } elseif ($this->estado == 'C') {
            return 'Cancelada';
        }

        // }}}
    }

    public function modificar($cambios)
    {
        // {{{

        if (
                isset($cambios['fecha']['Y'])
            && !empty($cambios['fecha']['Y'])
            &&  isset($cambios['fecha']['M'])
            && !empty($cambios['fecha']['M'])
            &&  isset($cambios['fecha']['d'])
            && !empty($cambios['fecha']['d'])
            &&  isset($cambios['fecha']['H'])
            && !empty($cambios['fecha']['H'])
            &&  isset($cambios['fecha']['i'])
            && !empty($cambios['fecha']['i'])
        ){
            $strFecha =
                  $cambios['fecha']['Y']
                . '-'
                . $cambios['fecha']['M'] 
                . '-'
                . $cambios['fecha']['d'] 
                . ' '
                . $cambios['fecha']['H'] 
                . ':'
                . $cambios['fecha']['i'] 
            ;
        }else{
            $strFecha = null;
        }

        $this->id_tipo_prueba = $cambios['id_tipo_prueba'];
        $this->fecha = $strFecha;
        $this->estado = $cambios['estado'];

        $this->save();

        // }}}
    }

    public function generarJSON()
    {
        // {{{

//{"listpruebas":[{"estado":"p","fecha":1328265749230,"idtipoprueba":"4889e0d745694a7600b7ec5d9849bc90","idprueba":"id_prueba_1","idpaciente":"4889e0d745694a7600b7ec5d9849bc79"}]}

        $datos = array(
            'listpruebas' => array(
                array(
                    'estado' => strtolower($this->estado),
                    'fecha' => (int) strtotime($this->fecha),
                    'idtipoprueba' => $this->PruebasTipos->codigo,
                    'idprueba' => $this->id,
                    'idpaciente' => $this->Pacientes->codigo,
                )
            )
        );

        return json_encode($datos);

        // }}}
    }

    public function enviarRegistro()
    {
        // {{{

        $ch = curl_init(URL_SERVICIOS . 'insertorupdate_pruebas');

        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json', 'Accept:application/json'));
        curl_setopt($ch, CURLOPT_HEADER, 0);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $this->generarJSON());
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);


        $respuesta = curl_exec ($ch);
        curl_close ($ch);

        return $respuesta;

        /*
        CURLOPT_HTTPHEADER, array('Content-Type: text/xml')
        This means that we add an HTTP header to the CURL request. We define that our information is not POST data, but XML data. You may also add more headers, by adding extra array values.

        CURLOPT_HEADER is set to 0, because we don't want to show the headers that the API sends back.

        CURLOPT_POST, 1
        We define that this is a POST message. We set it to 1 meaning true.

        CURLOPT_POSTFIELDS, $inputdata
        We add our XML data into the POST fields which are the fields that we want to send to the API.

        CURLOPT_FOLLOWLOCATION, 0
        We don't want to follow any links the API outputs.

        CURLOPT_REFERER, "http://localhost/apiCURL.php"
        This is the HTTP referer option, that we send to the API; it can be anything really, so it's possible to use this to disguise where the request comes from.

        CURLOPT_RETURNTRANSFER, 1
        This means that CURL will return the transcript and response without immediately printing it, but rather returning the value.
        */


        // }}}
    }

    public function mostrarResultado()
    {
        // {{{

        $resultado = json_decode($this->resultado, true);

        $texto = '';

        if (is_array($resultado)) {

            foreach ($resultado as $prueba => $valores) {

                $texto .= '<b>' . $prueba . ':</b> ';

                if (is_array($valores)) {
                    $texto .= implode($valores, ', ');
                }

                $texto .= '<br>';

            }
        }

        return $texto;



        // }}}
    }

    public function mostrarResultadoPeso()
    {
        // {{{

        $resultado = json_decode($this->resultado, true);

        $texto = '';

        if (is_array($resultado)) {

            foreach ($resultado as $prueba => $valores) {

                if ($prueba == 'Peso') {

                    $texto .= '<b>' . $prueba . ':</b> ';

                    if (is_array($valores)) {
                        $texto .= implode($valores, ', ');
                    }

                    $texto .= '<br>';
                }

            }
        }

        return $texto;



        // }}}
    }

    public function tienePrueba($nombre)
    {
        // {{{

        $resultado = json_decode($this->resultado, true);

        if (isset($resultado[$nombre])) {
            return true;
        } else {
            return false;
        }

        // }}}
    }

    public function devolverValores($nombre)
    {
        // {{{

        $resultado = json_decode($this->resultado, true);

        if (isset($resultado[$nombre])) {
            return json_encode($resultado[$nombre]);
        } else {
            return false;
        }

        // }}}
    }

    public function devolverEscala($nombre)
    {
        // {{{

        $resultado = json_decode($this->resultado, true);

        $tiempos = array(
            'Saturacion' => 50,
            'Rpm' => 50,
            'Pulso' => 50,
        );

        if (
            isset($resultado[$nombre]) 
            && is_array($resultado[$nombre]) 
            && count($resultado[$nombre]) > 0
        ) {

            $duracionPaso = $tiempos[$nombre] / count($resultado[$nombre]);
            
            return json_encode(range(0, $tiempos[$nombre], $duracionPaso));
        } else {
            return json_encode(range(0, $tiempos[$nombre]));
        }

        // }}}
    }

}
